import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * The BankStatementGenerator class generates a bank statement file for a specific user.
 * It includes all the information about the user and their transactions during a session of running the code.
 * The bank statement can be generated by the Bank Manager.
 * 
 * The BankStatementGenerator uses the Account, Customer, Checking, Saving, and Credit classes to retrieve user information and transactions.
 * It generates the bank statement in a simple text format.
 * 
 * Note: The user's transactions will need to be provided separately as this functionality is not available in the current implementation.
 * 
 * @author Juan Moreno, Javier Ontiveros, Alejandro Gonzalez
 * @version 1.0.0
 */
public class BankStatementGenerator {

    /**
     * Generates a bank statement file for the specified user.
     *
     * @param user The user account for whom the bank statement is to be generated.
     */
    public static void generateBankStatement(Account user) {
        String firstName = user.getCustomer().getFirstName();
        String lastName = user.getCustomer().getLastName();
        String fileName = firstName + "_" + lastName + "_BankStatement.txt";

        try {
            FileWriter fw = new FileWriter(fileName);
            fw.write("Bank Statement for: " + firstName + " " + lastName);
            fw.write(System.lineSeparator());
            fw.write(System.lineSeparator());

            // Write user's personal information
            fw.write("Personal Information:");
            fw.write(System.lineSeparator());
            fw.write(customerInformationToString(user.getCustomer()));
            fw.write(System.lineSeparator());
            fw.write(System.lineSeparator());

            // Write all transactions (needs to be provided separately)
            // For demonstration purposes, let's assume there were no transactions during this session
            fw.write("Transactions:");
            fw.write(System.lineSeparator());
            fw.write("No transactions in this session.");
            fw.write(System.lineSeparator());
            fw.write(System.lineSeparator());

            // Write ending balance (needs to be provided separately)
            // For demonstration purposes, let's assume the ending balance is the same as the starting balance
            double endingBalance = user.getChecking().getCheckingStartingBalance();
            fw.write("Ending Balance: $" + endingBalance);
            fw.write(System.lineSeparator());
            fw.write(System.lineSeparator());

            // Write date of statement
            String dateOfStatement = getCurrentDateTime();
            fw.write("Date of Statement: " + dateOfStatement);
            fw.write(System.lineSeparator());

            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the file writing exception as needed
        }
    }

    /**
     * Converts customer information to a string representation.
     *
     * @param customer The customer object containing the user's personal information.
     * @return The string representation of the customer information.
     */
    private static String customerInformationToString(Customer customer) {
        return "Identification Number: " + customer.getIdentificationNumber() + ", " +
                "Date of Birth: " + customer.getDateOfBirth() + ", " +
                "Address: " + customer.getAddress() + ", " +
                "Phone Number: " + customer.getPhoneNumber();
    }

    /**
     * Gets the current date and time as a formatted string.
     *
     * @return The current date and time as a formatted string.
     */
    private static String getCurrentDateTime() {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        return formatter.format(date);
    }
}